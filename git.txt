git init    	初始化仓库

git add    	添加文件到仓库

git commit -m "提交说明"    提交文件到仓库

git status	查看仓库状态，跟filename查看指定文件状态，不加查看所有文件状态 

git diff	查看文件做了那些修改

git log		查看提交记录，加--pretty=oneline参数。在一行显示

git reset --hard HEAD^ 	回退到上个版本，HEAD^^回退到上上个版本，GEAD~100回退上100个版本，commit id 回退或者恢复指定提交版本，无需全部id号，确定唯一即可

git reflog	记录每一次操作的命令，回退版本时在恢复，可使用此命令查看 commit id

git diff HEAD -- filename	对比工作区和版本库里面最新版本的区别

修改文件
执行顺序：git add filename => git commit -m ""
git add 提交 工作区文件到暂存区 
git commit 提交暂存区文件到当前分支

修改文件
git commit -m ""
由于没有执行git add 把工作区文件提交到暂存区 修改不生效

三种情况下的撤销修改：
1、文件只是修改没有  git add 也就没有 git commit -m "" 
    git checkout -- filename	注意 "--"必须，否则是切换分支

2、文件修改后 git add 到暂存区  没有 git commit -m "" 提交到分支
    git reset HEAD filename    把暂存区的修改撤销掉，重新放回工作区
    git checkout -- filename   丢弃工作区的修改
  
3、文件修改后 git add 到暂存区 并且 git commit -m "" 提交到分支
    git reset --hard HEAD^    回退上个版本

删除文件
vi filename     新建一个文件
git add filename    提交文件到暂存区
git commit -m ""    提交文件到版本库

rm filename    从本地删除文件

    两种情况
        从版本库删除文件
	从版本库恢复文件

	1、git rm filename    从版本库删除文件
	   git commit -m ""   并且提交到版本库

	2、git checkout -- filename    从版本库恢复文件到本地
    git rm filename 和 git checkout -- filename    执行过git rm 后执行git checkout -- filename 会报错，文件已经从版本库删除，无法再从版本库恢复


远程仓库：
git remote add origin git@server-name:path/repo-name.git    关联远程仓库
git remote add origin git@github.com:username/repo.git

git push -u origin master    第一次推送master分支的所有内容

git push origin master    推送最新修改

git clone git@github.com:username/repo-name.git    克隆远程仓库到本地
git clone https://github.com/username/repo-name.git    https协议克隆仓库

查看分支：
git branche    查看所有分支，当前分标*

创建分支：
git checkout -b dev    创建分支并切换，加上-b相当于：
git branch dev    创建分支  
git checkout dev    切换分支

合并分支：
git merge dev    把当前分支合并到master分支
git branch -d dev    删除分支

合并分支前先切换到master分支：
git checkout master    切换分支
git merge dev    合并dev分支到master分支
git branch -d dev    删除dev分支

解决冲突：
    git checkout -b feature    创建一个新的分支
    修改readme.txt  添加一行 Creating a new branch is quick AND simple
    在feature 分支提交
        git add readme.txt
	git commit -m "AND simple"

    切换到master分支
    git checkout master
    修改readme.txt  添加一行 Crateing a new branch is quick & simple
    在master分支提交
        git add readme.txt
	git commit -m "& simple"

    在master分支合并feature分支
        git merge feature    提示冲突，必须手动解决

    使用git status查看冲突文件

    查看readme.txt 内容
        git用<<<<<<<,=======,>>>>>>>标记不同分支的内容

    修改readme.txt内容 Creating a new branch is quick and simle
    在提交
        git add readme.txt
	git commit -m "conflict fixed"

    git log --graph --pretty=oneline --abbrev-commit    查看分支合并情况

    git log --graph    查看分支合并图

    git branch -d feature    删除分支

分支管理策略：
合并分支时，如果可能Git会用Fast forward模式，这种模式下，删除分支后，会丢掉分支信息
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样从分支历史上可以看出分支信息

使用--no-ff的方式merge：
git merge --no-ff -m "merge with no-ff" dev 以禁用fast forward方式提交，因为本次合并需要创建一个新的commit，所以加上-m参数，把commit描述写进去

合并后使用git log查看分支历史：
git log --graph --pretty=oneline --ahhrev-commit 

分支管理原则：
master分支应该是稳定的，仅用来发布新版本，平时不再上面干活
dev分支，是不稳定的用来干活，到版本发布时，把dev分支合并到master分支上
每个人都有一个自己分支，时不时往dev分支上合并
